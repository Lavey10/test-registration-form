<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Job Dashboard - JobMatcher</title>
    
    <!-- React CDN -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    <!-- Lucide Icons -->
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #1f2937;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 32px;
            border-radius: 20px;
            margin-bottom: 32px;
            text-align: center;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .header h1 {
            font-size: 36px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 12px;
            font-weight: 800;
        }

        .header p {
            color: #6b7280;
            font-size: 18px;
            opacity: 0.9;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 24px;
            margin-bottom: 32px;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 28px;
            border-radius: 16px;
            text-align: center;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .stat-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
        }

        .stat-number {
            font-size: 48px;
            font-weight: 800;
            margin-bottom: 8px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .stat-label {
            color: #6b7280;
            font-weight: 600;
            font-size: 16px;
        }

        .controls {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 24px;
            border-radius: 16px;
            margin-bottom: 24px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .controls-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 16px;
        }

        .search-filter {
            display: flex;
            gap: 16px;
            align-items: center;
            flex-wrap: wrap;
        }

        .search-input {
            padding: 12px 16px;
            border: 2px solid #e5e7eb;
            border-radius: 12px;
            font-size: 16px;
            min-width: 250px;
            transition: border-color 0.3s ease;
        }

        .search-input:focus {
            outline: none;
            border-color: #667eea;
        }

        .filter-select {
            padding: 12px 16px;
            border: 2px solid #e5e7eb;
            border-radius: 12px;
            font-size: 16px;
            background: white;
            cursor: pointer;
            transition: border-color 0.3s ease;
        }

        .filter-select:focus {
            outline: none;
            border-color: #667eea;
        }

        .refresh-btn {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 12px;
            cursor: pointer;
            font-weight: 600;
            font-size: 16px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .refresh-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(16, 185, 129, 0.3);
        }

        .loading {
            text-align: center;
            padding: 60px;
            color: rgba(255, 255, 255, 0.8);
            background: rgba(255, 255, 255, 0.1);
            border-radius: 16px;
            backdrop-filter: blur(10px);
        }

        .loading h3 {
            font-size: 24px;
            margin-bottom: 16px;
        }

        .error {
            background: rgba(239, 68, 68, 0.1);
            color: #dc2626;
            padding: 24px;
            border-radius: 16px;
            text-align: center;
            margin: 20px 0;
            border: 1px solid rgba(239, 68, 68, 0.2);
        }

        .match-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 32px;
            margin-bottom: 24px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
            border-left: 6px solid #e5e7eb;
        }

        .match-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
        }

        .match-card.excellent {
            border-left-color: #22c55e;
        }

        .match-card.good {
            border-left-color: #f59e0b;
        }

        .match-card.fair {
            border-left-color: #ef4444;
        }

        .match-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 24px;
            gap: 20px;
        }

        .job-info h3 {
            font-size: 24px;
            color: #1f2937;
            margin-bottom: 8px;
            font-weight: 700;
            line-height: 1.3;
        }

        .job-meta {
            color: #6b7280;
            font-size: 16px;
            display: flex;
            align-items: center;
            gap: 12px;
            flex-wrap: wrap;
            margin-bottom: 8px;
        }

        .score-container {
            text-align: center;
            min-width: 120px;
        }

        .score-badge {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 12px 20px;
            border-radius: 30px;
            font-weight: 800;
            font-size: 18px;
            margin-bottom: 8px;
            display: inline-block;
            min-width: 80px;
        }

        .score-badge.excellent {
            background: linear-gradient(135deg, #22c55e 0%, #16a34a 100%);
        }

        .score-badge.good {
            background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        }

        .score-badge.fair {
            background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        }

        .score-label {
            font-size: 12px;
            color: #9ca3af;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .match-details {
            margin-bottom: 24px;
            line-height: 1.6;
        }

        .reasoning {
            color: #374151;
            margin-bottom: 20px;
            font-size: 16px;
            padding: 16px;
            background: rgba(243, 244, 246, 0.5);
            border-radius: 12px;
            border-left: 4px solid #667eea;
        }

        .skills-section {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }

        .skills-group h4 {
            font-size: 14px;
            font-weight: 600;
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .skills-have h4 {
            color: #059669;
        }

        .skills-need h4 {
            color: #dc2626;
        }

        .skills-list {
            font-size: 14px;
            color: #6b7280;
            line-height: 1.5;
        }

        .match-actions {
            display: flex;
            gap: 16px;
            align-items: center;
            justify-content: space-between;
            flex-wrap: wrap;
        }

        .apply-btn {
            background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
            color: white;
            padding: 14px 28px;
            text-decoration: none;
            border-radius: 12px;
            font-weight: 700;
            font-size: 16px;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            border: none;
            cursor: pointer;
        }

        .apply-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3);
        }

        .job-meta-info {
            display: flex;
            gap: 20px;
            color: #9ca3af;
            font-size: 14px;
            align-items: center;
        }

        .empty-state {
            text-align: center;
            padding: 80px 20px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .empty-state h3 {
            font-size: 28px;
            margin-bottom: 16px;
            color: #374151;
        }

        .empty-state p {
            color: #6b7280;
            margin-bottom: 32px;
            font-size: 18px;
        }

        @media (max-width: 768px) {
            .container {
                padding: 16px;
            }

            .header {
                padding: 24px;
            }

            .header h1 {
                font-size: 28px;
            }

            .match-header {
                flex-direction: column;
                align-items: stretch;
            }

            .controls-header {
                flex-direction: column;
                align-items: stretch;
            }

            .search-filter {
                flex-direction: column;
            }

            .search-input {
                min-width: 100%;
            }

            .skills-section {
                grid-template-columns: 1fr;
                gap: 16px;
            }

            .match-actions {
                flex-direction: column;
                align-items: stretch;
            }

            .job-meta-info {
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect } = React;

        // Configuration - UPDATE THIS WITH YOUR ACTUAL n8n INSTANCE URL
        const API_BASE_URL = 'https://laveychaudhary.app.n8n.cloud';

        function JobDashboard() {
            const [loading, setLoading] = useState(true);
            const [error, setError] = useState(null);
            const [dashboardData, setDashboardData] = useState(null);
            const [searchTerm, setSearchTerm] = useState('');
            const [scoreFilter, setScoreFilter] = useState('all');
            const [filteredMatches, setFilteredMatches] = useState([]);

            // Get user ID from URL parameters
            const getUserId = () => {
                const urlParams = new URLSearchParams(window.location.search);
                return urlParams.get('user_id') || 'demo_user';
            };

            // Load dashboard data
            const loadDashboard = async () => {
                const userId = getUserId();
                setLoading(true);
                setError(null);

                try {
                    const response = await fetch(`${API_BASE_URL}/webhook/dashboard-api?user_id=${userId}`);
                    
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    
                    const data = await response.json();
                    setDashboardData(data);
                    setFilteredMatches(data.matches || []);
                    
                } catch (error) {
                    console.error('Error loading dashboard:', error);
                    setError('Unable to load job matches. Please try refreshing the page.');
                } finally {
                    setLoading(false);
                }
            };

            // Filter matches based on search and score filter
            useEffect(() => {
                if (!dashboardData?.matches) return;

                let filtered = dashboardData.matches;

                // Apply search filter
                if (searchTerm) {
                    filtered = filtered.filter(match =>
                        match.job_title?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                        match.company?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                        match.location?.toLowerCase().includes(searchTerm.toLowerCase())
                    );
                }

                // Apply score filter
                if (scoreFilter !== 'all') {
                    if (scoreFilter === 'excellent') {
                        filtered = filtered.filter(match => match.match_score >= 80);
                    } else if (scoreFilter === 'good') {
                        filtered = filtered.filter(match => match.match_score >= 70 && match.match_score < 80);
                    } else if (scoreFilter === 'fair') {
                        filtered = filtered.filter(match => match.match_score < 70);
                    }
                }

                setFilteredMatches(filtered);
            }, [dashboardData, searchTerm, scoreFilter]);

            // Load dashboard on component mount
            useEffect(() => {
                loadDashboard();
            }, []);

            const getScoreClass = (score) => {
                if (score >= 80) return 'excellent';
                if (score >= 70) return 'good';
                return 'fair';
            };

            const getScoreLabel = (score) => {
                if (score >= 80) return 'Excellent';
                if (score >= 70) return 'Good';
                return 'Fair';
            };

            if (loading) {
                return (
                    <div className="container">
                        <div className="loading">
                            <h3>🔄 Loading your job matches...</h3>
                            <p>Please wait while we fetch your personalized recommendations</p>
                        </div>
                    </div>
                );
            }

            if (error) {
                return (
                    <div className="container">
                        <div className="error">
                            <h3>⚠️ Unable to load matches</h3>
                            <p>{error}</p>
                            <button className="refresh-btn" onClick={loadDashboard} style={{marginTop: '16px'}}>
                                🔄 Try Again
                            </button>
                        </div>
                    </div>
                );
            }

            return (
                <div className="container">
                    {/* Header */}
                    <div className="header">
                        <h1>🎯 Your Job Dashboard</h1>
                        <p>AI-powered job matches tailored for your skills and experience</p>
                    </div>

                    {/* Stats */}
                    <div className="stats-grid">
                        <div className="stat-card">
                            <div className="stat-number">{dashboardData?.stats?.total_matches || 0}</div>
                            <div className="stat-label">Total Matches</div>
                        </div>
                        <div className="stat-card">
                            <div className="stat-number">{dashboardData?.stats?.excellent_matches || 0}</div>
                            <div className="stat-label">Excellent (80%+)</div>
                        </div>
                        <div className="stat-card">
                            <div className="stat-number">{dashboardData?.stats?.good_matches || 0}</div>
                            <div className="stat-label">Good (70%+)</div>
                        </div>
                    </div>

                    {/* Controls */}
                    <div className="controls">
                        <div className="controls-header">
                            <div>
                                <h2 style={{margin: '0 0 4px 0', color: '#1f2937'}}>Your Job Matches</h2>
                                <p style={{margin: 0, color: '#6b7280'}}>
                                    Showing {filteredMatches.length} of {dashboardData?.stats?.total_matches || 0} matches
                                </p>
                            </div>
                            <button className="refresh-btn" onClick={loadDashboard}>
                                🔄 Refresh
                            </button>
                        </div>

                        <div className="search-filter">
                            <input
                                type="text"
                                className="search-input"
                                placeholder="🔍 Search jobs, companies, or locations..."
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                            />
                            <select
                                className="filter-select"
                                value={scoreFilter}
                                onChange={(e) => setScoreFilter(e.target.value)}
                            >
                                <option value="all">All Matches</option>
                                <option value="excellent">Excellent (80%+)</option>
                                <option value="good">Good (70-79%)</option>
                                <option value="fair">Fair (&lt;70%)</option>
                            </select>
                        </div>
                    </div>

                    {/* Job Matches */}
                    <div className="matches-container">
                        {filteredMatches.length === 0 ? (
                            <div className="empty-state">
                                <h3>No matches found</h3>
                                <p>Try adjusting your search or filter criteria</p>
                                <button className="refresh-btn" onClick={() => { setSearchTerm(''); setScoreFilter('all'); }}>
                                    ✨ Show All Matches
                                </button>
                            </div>
                        ) : (
                            filteredMatches.map((match, index) => (
                                <div key={match.id || index} className={`match-card ${getScoreClass(match.match_score)}`}>
                                    <div className="match-header">
                                        <div className="job-info">
                                            <h3>{match.job_title || 'Job Title Not Available'}</h3>
                                            <div className="job-meta">
                                                <span><strong>{match.company || 'Company'}</strong></span>
                                                <span>•</span>
                                                <span>📍 {match.location || 'Location'}</span>
                                            </div>
                                        </div>
                                        <div className="score-container">
                                            <div className={`score-badge ${getScoreClass(match.match_score)}`}>
                                                {match.match_score}%
                                            </div>
                                            <div className="score-label">{getScoreLabel(match.match_score)}</div>
                                        </div>
                                    </div>

                                    <div className="match-details">
                                        <div className="reasoning">
                                            <strong>🤖 AI Analysis:</strong> {match.reasoning || 'Analysis not available'}
                                        </div>

                                        <div className="skills-section">
                                            <div className="skills-group skills-have">
                                                <h4>✅ You Have</h4>
                                                <div className="skills-list">
                                                    {match.matching_skills || 'No skills listed'}
                                                </div>
                                            </div>
                                            <div className="skills-group skills-need">
                                                <h4>📚 To Learn</h4>
                                                <div className="skills-list">
                                                    {match.missing_skills || 'None required'}
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div className="match-actions">
                                        <a 
                                            href={match.apply_url || '#'} 
                                            target="_blank" 
                                            rel="noopener noreferrer"
                                            className="apply-btn"
                                        >
                                            🚀 Apply Now
                                        </a>
                                        <div className="job-meta-info">
                                            <span>📅 {match.created_date || 'Recently'}</span>
                                            <span>💼 {match.job_type || 'Full-time'}</span>
                                            <span>💰 {match.salary_info || 'Salary not specified'}</span>
                                        </div>
                                    </div>
                                </div>
                            ))
                        )}
                    </div>

                    {/* Footer */}
                    <div style={{textAlign: 'center', marginTop: '40px', color: 'rgba(255,255,255,0.7)'}}>
                        <p>Dashboard updates daily with new job matches</p>
                        <p><a href="mailto:support@jobmatcher.com" style={{color: 'rgba(255,255,255,0.9)'}}>Need help?</a></p>
                    </div>
                </div>
            );
        }

        // Render the dashboard
        ReactDOM.render(<JobDashboard />, document.getElementById('root'));
    </script>
</body>
</html>
